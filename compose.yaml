name: voting-experiment

networks:
  voting-net:
    driver: bridge

services:
  service-java:
    build:
      context: ./route-picking-3opt-mid
    container_name: service-java
    image: local/service-java:latest
    environment:
      PORT: "8081"
    ports:
      - "8081:8081"
    networks:
      - voting-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://service-java:8081/actuator/health/readiness" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

    # ===== Límites efectivos en Docker Compose (no Swarm) =====
    cpus: "1"              # hasta 0.75 CPUs lógicos
    mem_limit: "512m"         # hard limit
    mem_reservation: "256m"   # soft reservation (útil para OOM/planificación)

  service-python:
    build:
      context: ./ArquitecturasAgiles-Logistica-02
    container_name: service-python
    image: local/service-python:latest
    environment:
      PORT: "8082"
    ports:
      - "8082:8082"
    networks:
      - voting-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://service-python:8082/up" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s

    cpus: "1"
    mem_limit: "512m"
    mem_reservation: "256m"

  service-ruby:
    build:
      context: ./ArquitecturasAgiles-Logistica-01
    container_name: service-ruby
    image: local/service-ruby:latest
    environment:
      PORT: "3001"
    ports:
      - "3001:3001"
    networks:
      - voting-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health" ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

    cpus: "1"
    mem_limit: "512m"
    mem_reservation: "256m"
  
  service-voting:
    build:
      context: ./ArquitecturasAgiles-Voting
    container_name: service-voting
    image: local/service-voting:latest
    environment:
      PORT: "9000"
    depends_on:
      service-java:
        condition: service_healthy
      service-python:
        condition: service_healthy
      service-ruby:
        condition: service_healthy
    ports:
      - "9000:9000"
    networks:
      - voting-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/actuator/health/readiness" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

    cpus: "1.00"
    mem_limit: "512m"
    mem_reservation: "384m"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    depends_on:
      service-voting:
        condition: service_healthy
    volumes:
      - ./Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - voting-net
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.7
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      - voting-net
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.7
    container_name: promtail
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./Promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - //var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - voting-net
    depends_on:
      - loki
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - voting-net
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped
    volumes:
      - ./Grafana/datasource/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml:ro
      - ./Grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
      - ./Grafana/dashboard:/var/lib/grafana/dashboards:ro
